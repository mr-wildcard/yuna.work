name: "Get Cloudflare Pages preview URL"
description: "Wait for a Cloudflare Pages preview deployment of a branch and expose the immutable URL."
author: "mr-wildcard"
inputs:
  cloudflare-account-id:
    description: "Cloudflare account identifier."
    required: true
  cloudflare-api-token:
    description: "API token with Pages read access."
    required: true
  cloudflare-pages-project:
    description: "Cloudflare Pages project name."
    required: true
  branch-name:
    description: "Git branch to watch for a preview deployment. Defaults to the current head ref."
    required: false
    default: ""
  timeout-secs:
    description: "Maximum time (in seconds) to wait for a successful deployment."
    required: false
    default: "900"
  poll-interval-secs:
    description: "Delay (in seconds) between successive deployment status checks."
    required: false
    default: "10"
outputs:
  status:
    description: "Final status reported by Cloudflare (success, failure, etc.)."
    value: ${{ steps.wait.outputs.status }}
  preview-url:
    description: "Immutable Cloudflare Pages URL for the deployment."
    value: ${{ steps.wait.outputs.preview-url }}
runs:
  using: "composite"
  steps:
    - name: Ensure jq is available
      shell: bash
      run: |
        set -euo pipefail

        if ! command -v jq >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          else
            echo "::error::jq is required but could not be installed automatically."
            exit 1
          fi
        fi

    - name: Wait for Cloudflare Pages preview deployment
      id: wait
      shell: bash
      env:
        CF_ACCOUNT_ID: ${{ inputs.cloudflare-account-id }}
        CF_API_TOKEN: ${{ inputs.cloudflare-api-token }}
        CF_PAGES_PROJECT: ${{ inputs.cloudflare-pages-project }}
        TIMEOUT_SECS: ${{ inputs.timeout-secs }}
        POLL_INTERVAL_SECS: ${{ inputs.poll-interval-secs }}
        INPUT_BRANCH_NAME: ${{ inputs.branch-name }}
      run: |
        set -euo pipefail

        BRANCH_NAME="${INPUT_BRANCH_NAME:-${GITHUB_HEAD_REF:-${GITHUB_REF_NAME:-}}}"
        if [[ -z "${BRANCH_NAME}" ]]; then
          echo "::error::Unable to determine branch name. Please provide the 'branch-name' input."
          exit 1
        fi

        echo "Waiting for preview deployment of branch: ${BRANCH_NAME}..."

        start=$(date +%s)

        while true; do
          json=$(curl -fsS \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/${CF_PAGES_PROJECT}/deployments?env=preview")

          item=$(jq -r --arg b "${BRANCH_NAME}" '
            .result
            | map(select(.deployment_trigger?.metadata?.branch | ascii_downcase == ($b | ascii_downcase)))
            | sort_by(.created_on) | last
          ' <<<"$json")

          if [[ "$item" == "null" || -z "$item" ]]; then
            echo "No preview deployment found yet for branch '${BRANCH_NAME}'. Retrying..."
          else
            status=$(jq -r '.latest_stage?.status // "unknown"' <<<"$item")
            hash_url=$(jq -r '.url' <<<"$item")

            echo "Current status: ${status} | hash URL: ${hash_url}"

            if [[ "$status" == "success" ]]; then
              echo "preview-url=${hash_url:-}" >> "$GITHUB_OUTPUT"
              echo "status=success" >> "$GITHUB_OUTPUT"
              if [[ -n "${hash_url}" && "${hash_url}" != "null" ]]; then
                echo "CF_PREVIEW_HASH_URL=${hash_url}" >> "$GITHUB_ENV"
              fi
              break
            fi

            if [[ "$status" == "failure" || "$status" == "failed" || "$status" == "canceled" ]]; then
              echo "preview-url=${hash_url:-}" >> "$GITHUB_OUTPUT"
              echo "status=${status}" >> "$GITHUB_OUTPUT"
              if [[ -n "${hash_url}" && "${hash_url}" != "null" ]]; then
                echo "CF_PREVIEW_HASH_URL=${hash_url}" >> "$GITHUB_ENV"
              fi
              echo "::error::Deployment failed with status '${status}'."
              exit 1
            fi
          fi

          now=$(date +%s)
          if (( now - start > TIMEOUT_SECS )); then
            echo "status=timeout" >> "$GITHUB_OUTPUT"
            echo "::error::Timeout waiting for successful preview deployment after ${TIMEOUT_SECS}s."
            exit 1
          fi

          sleep "${POLL_INTERVAL_SECS}"
        done
