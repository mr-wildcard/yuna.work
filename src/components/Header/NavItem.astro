---
interface Props {
  to: string;
  variant: "primary" | "secondary";
  class?: string;
}

const { pathname } = Astro.url;
const { to, class: cssClasses = [], variant } = Astro.props;

const isSelected = pathname.replaceAll("/", "") === to?.replaceAll("/", "");

const HTMLTag = isSelected ? "span" : "a";

const basicCSSClasses = ["inline-block", "lg:px-5", "lg:py-2"];

const variantCSSClasses =
  variant === "primary"
    ? ["text-display-small", "lg:text-menu-label"]
    : ["text-body-normal", "text-secondary"];

const isSelectedCSSClasses = [
  "lg:text-paragraph",
  variant === "primary" ? ["text-secondary", "lg:text-paragraph"] : undefined,
];

const anchorCSSClasses = ["lg:rounded-full", "lg:hover:bg-neutral3"];
---

<HTMLTag
  href={!isSelected ? to : undefined}
  class:list={[
    ...basicCSSClasses,
    ...variantCSSClasses,
    isSelected ? isSelectedCSSClasses : undefined,
    !isSelected ? anchorCSSClasses : undefined,
    ...cssClasses,
  ]}
>
  <span class:list={["relative", "content", { selected: isSelected }]}>
    <slot />

    {
      isSelected && (
        <span class="sr-only">(page active)</span>
        <span class="bg-secondary absolute -bottom-[10px] left-0 w-full h-[4px] rounded-[4px]" />
      )
    }
  </span>
</HTMLTag>
